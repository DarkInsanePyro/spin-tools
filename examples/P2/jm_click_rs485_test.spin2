'' =================================================================================================
''
''   File....... jm_click_rs485_test.spin2
''   Purpose....
''   Author..... Jon "JonnyMac" McPhalen
''               Copyright (c) 2020 Jon McPhalen
''               -- see below for terms of use
''   E-mail..... jon.mcphalen@gmail.com
''   Started....
''   Updated.... 28 OCT 2020
''
''   {$P2}
''
'' =================================================================================================

{{

   This is a simple RS-485 bridge between the two Click RS-485 boards attached to a P2 Eval
   or Edge breadboard.

   The RS-458 Click will put itself in transmit mode when bytes are available to be transmitted.

}}


con { timing }

  CLK_FREQ = 200_000_000                                        ' system freq as a constant
  MS_001   = CLK_FREQ / 1_000                                   ' ticks in 1ms
  US_001   = CLK_FREQ / 1_000_000                               ' ticks in 1us

  BR_TERM  = 115_200                                            ' terminal baud rate
  BR_485   =  57_600

  _clkfreq = CLK_FREQ                                           ' set system clock


con { fixed io pins }

  RX1      = 63  { I }                                          ' programming / debug
  TX1      = 62  { O }

  SF_CS    = 61  { O }                                          ' serial flash
  SF_SCK   = 60  { O }
  SF_SDO   = 59  { O }
  SF_SDI   = 58  { I }

  SD_SCK   = 61  { O }                                          ' sd card
  SD_CS    = 60  { O }
  SD_SDO   = 59  { O }
  SD_SDI   = 58  { I }

  SDA1     = 57  { IO }                                         ' i2c (optional)
  SCL1     = 56  { O }


con { Click base pins }

  CLICK3   = 48  { caution }
  CLICK2   = 32
  CLICK1   = 16
  CLICK0   =  0


con

  #true,  ON, OFF
  #false, NO, YES


obj

' main                                                          ' * master Spin cog
  term : "jm_fullduplexserial"                                  ' * serial IO for terminal
  com0 : "jm_click_rs485_3v3"                                   ' * rs-485 serial driver
  com1 : "jm_click_rs485_3v3"                                   ' * rs-485 serial driver

' * uses cog when loaded


dat { pre-initialized }

' last char must be CR for test

  Msg0      byte        "Hello from COM0!", 13, 0
  Msg1      byte        "Hello there, this is COM1!", 13, 0


var { globals }


pub main() | b

  setup()

  wait_for_terminal(true)

  com0.write_str(@Msg0)                                         ' start the messaging
  waitms(100)

  repeat
    repeat                                                      ' any message into com0?
      b := com0.check_byte()
      if (b < 0)
        quit
      else
        term.tx(b)
        if (b == 13)                                            ' if CR, end of message
          waitms(200)                                           ' hold a bit
          com0.write_str(@Msg0)                                 ' reply
          com0.txflush()                                        ' let it go
          waitms(50)

    repeat                                                      ' any message into com1?
      b := com1.check_byte()
      if (b < 0)
        quit
      else
        term.tx(b)
        if (b == 13)
          waitms(200)
          com1.write_str(@Msg1)
          com1.txflush()
          waitms(50)


pub setup()

  term.start(RX1, TX1, %0000, BR_TERM)                                  ' start terminal io

  com0.start(CLICK0, BR_485)                                            ' start RS-485 io
  com1.start(CLICK1, BR_485)


pub wait_for_terminal(clear)

  ' Download to RAM with F10
  ' F12 to open PST
  ' Click [Enable]
  ' Press Enter

  term.rxflush()
  term.rx()
  if (clear)
    term.tx(term.CLS)


con { license }

{{

  Terms of Use: MIT License

  Permission is hereby granted, free of charge, to any person obtaining a copy of this
  software and associated documentation files (the "Software"), to deal in the Software
  without restriction, including without limitation the rights to use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to the following
  conditions:

  The above copyright notice and this permission notice shall be included in all copies
  or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

}}