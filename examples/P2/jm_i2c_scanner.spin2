'' =================================================================================================
''
''   File....... jm_i2c_scanner.spin2
''   Purpose.... I2C bus scanner; reports devices connected to defined bus pins
''   Author..... Jon "JonnyMac" McPhalen
''               Copyright (C) 2018-2020 Jon McPhalen
''               -- see below for terms of use
''   E-mail..... jon.mcphalen@gmail.com
''   Started....
''   Updated.... 01 JUL 2020
''
'' =================================================================================================


con { timing }

  CLK_FREQ = 200_000_000                                        ' system freq as a constant
  MS_001   = CLK_FREQ / 1_000                                   ' ticks in 1ms
  US_001   = CLK_FREQ / 1_000_000                               ' ticks in 1us

  BR_TERM  = 115_200                                            ' terminal baud rate

  _clkfreq = CLK_FREQ                                           ' set system clock


con { fixed io pins }

  RX1      = 63  { I }                                          ' programming / debug
  TX1      = 62  { O }                                           
                                                                 
  SF_CS    = 61  { O }                                          ' serial flash
  SF_SCK   = 60  { O }                                           
  SF_SDO   = 59  { O }                                           
  SF_SDI   = 58  { I }                                           
                                                                 
  SD_SCK   = 61  { O }                                          ' sd card
  SD_CS    = 60  { O }                                           
  SD_SDI   = 59  { O }                                           
  SD_SDO   = 58  { I }                                           
                                                                 
  SDA1     = 57  { IO }                                         ' i2c (optional)
  SCL1     = 56  { IO }  


con { app io pins }


con

  #true, ON, OFF                                                ' digital control
  #0, NO, YES
  
  TRIES = 1                                                     ' should not be needed!

  #0, S_LIST, S_MATRIX                                          ' display styles

  STYLE = S_MATRIX                                              ' selected style


obj

  i2c  : "jm_i2c"                                               ' i2c bus driver
  term : "jm_serial"                                            ' terminal output


pub main()

  setup()
  
  wait_for_terminal(true)

  if (STYLE == S_LIST)
    i2c_list()
  else
    i2c_matrix()

  term.fstr0(string("\rDone"))

  repeat
    waitct(0)


dat

  Banner1       byte    "P2 I2C Scanner", 13, 13, 0    

  Header1       byte    " #  7-bit  8-bit  DDDD AAA X", 13
                byte    "--  -----  -----  ---- --- -", 13, 0


pub i2c_list() | count, type, addr, devid, ok

'' Display connected I2C devices in list format

  term.str(@Banner1)
  term.str(@Header1)
  
  count := 0

  repeat type from %0001 to %1110                               ' loop through types
    repeat addr from 0 to 7                                     ' loop through addresses
      devid := (type << 4) | (addr << 1)                        ' build device id
      repeat TRIES
        if (ok := i2c.present(devid))                           ' ping the i2c device
          quit
        else
          waitus(100)
      if (ok)      
        term.fstr3(string("%2d   $%2x    $%2x   "), ++count, devid >> 1, devid)
        term.fstr3(string("%.4b %.3b %1b\r"), devid.[7..4], devid.[3..1], devid.[0])
        waitms(5)      


dat

  Banner2       byte    "P2 I2C Devices", 13
                byte    "-- dddd_aaa_0 (8-bit) format", 13, 13, 0  

  Header2       byte    "   00 02 04 06 08 0A 0C 0E", 13, 0


pub i2c_matrix() | count, type, addr, devid, ok

'' Display connected I2C devices in matrix format
 
  term.str(@Banner2)
  term.str(@Header2)
  
  count := 0

  repeat type from %0001 to %1110                               ' %0000 and %1111 not valid 
    term.fhex(type << 4, 2)
    term.tx(" ")
    repeat addr from %000 to %111
      devid := (type << 4) | (addr << 1)                        ' build device id
      if (i2c.present(devid))                                   ' ping device
        term.fhex(devid, 2)             
        term.tx(" ")
        ++count                
      else                            
        term.str(string(".. "))       
      waitms(1)
    term.tx(13)

  term.fstr1(string("\rDevices: %d\r"), count)  


pub setup()

  i2c.setup(SCL1, SDA1, 100, i2c.PU_15K)                        ' i2c @ 100kHz, external pull-ups
  term.start(BR_TERM)                                           ' start terminal io


pub wait_for_terminal(clear)

  ' Download to RAM with F10
  ' F12 to open PST
  ' Click [Enable]
  ' Press Enter

  term.rxflush()
  term.rx()
  if (clear)
    term.tx(term.CLS)


con { license }

{{

  Terms of Use: MIT License 

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

}}