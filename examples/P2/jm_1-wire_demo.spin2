'' =================================================================================================
''
''   File....... jm_1-wire_demo.spin2
''   Purpose.... Demostrate 1-Wire bus communications using DS18B20 temperature sensor
''   Author..... Jon "JonnyMac" McPhalen
''               Copyright (c) 2020 Jon McPhalen
''               -- see below for terms of use
''   E-mail..... jon.mcphalen@gmail.com
''   Started....
''   Updated.... 02 JUL 2020  
''
''   {$P2} 
''
'' =================================================================================================


' Connect single DS18B20 to the P2. The 1-Wire object supports internal and external pull-up
' configurations.


con { timing }

  CLK_FREQ = 200_000_000                                        ' system freq as a constant
  MS_001   = CLK_FREQ / 1_000                                   ' ticks in 1ms
  US_001   = CLK_FREQ / 1_000_000                               ' ticks in 1us

  BR_TERM  = 115_200                                            ' terminal baud rate

  _clkfreq = CLK_FREQ                                           ' set system clock


con { fixed io pins }

  RX1      = 63  { I }                                          ' programming / debug
  TX1      = 62  { O }                                           
                                                                 
  SF_CS    = 61  { O }                                          ' serial flash
  SF_SCK   = 60  { O }                                           
  SF_SDO   = 59  { O }                                           
  SF_SDI   = 58  { I }                                           
                                                                 
  SD_SCK   = 61  { O }                                          ' sd card
  SD_CS    = 60  { O }                                           
  SD_SDI   = 59  { O }                                           
  SD_SDO   = 58  { I }                                           
                                                                 
  SDA1     = 57  { IO }                                         ' i2c (optional)
  SCL1     = 56  { IO }                                          
                                                                 

con { app io pins }

  OW1      = 24  { IO }


con

  #true,  ON, OFF 
  #false, NO, YES

  
obj

' main                                                          ' * master Spin cog
  tsns : "jm_1-wire"                                            '   1-wire coms for DS18B20 
  term : "jm_serial"                                            '   serial IO for terminal    

' * uses cog when loaded


dat { pre-initialized }

  Banner        byte    "P2 1-Wire Communications", 13, 0


var { globals }                                                              
                                                                 
          
pub main() | tc, tf                                                       
                                                                 
  setup()                                                          
                                                                 
  wait_for_terminal(true)
  term.str(@Banner)

  bus_report()                                                  ' check 1W bus
  serial_number()                                               ' display device sn

  ' read and display temperature

  repeat
    tc := read_tc()
    tf := tc * 9 / 5 + 32_0000                                  ' convert to Fahrenheit
    term.fstr0(string("\002\000\005"))                          ' GOTO_XY 0,5
    term.fstr1(string("%5.1f\176C\r"), tc/1000)                 ' display in 10ths
    term.fstr1(string("%5.1f\176F\r"), tf/1000)  
    waitms(1000)
             

dat

  Status00      byte    "-- bus shorted", 13, 0
  Status01      byte    "-- bad response; unknown error", 13, 0 
  Status10      byte    "-- good bus and presence detected", 13, 0
  Status11      byte    "-- no device detected", 13, 0


pub bus_report() | check

  check := tsns.start(OW1, tsns.PU_1K5)                         ' connect with internal pull-up

  case check
    %00 :
      term.str(@Status00)

    %01 :
      term.str(@Status01)

    %10 :
      term.str(@Status10)
      return                                                    ' proceed to demo

    %11 :
      term.str(@Status11)

  repeat                                                        ' stop here on bus error
    waitct(0)   


pub serial_number() | i, crc

'' Read and display 

  read_sn(@SN0)                                                 ' read sn from device
  term.txn("-", 2)                                              ' display it
  repeat i from 7 to 0
    term.tx(" ")
    term.fxhex(SN0[i], 2)
  term.tx(13)
  crc := tsns.crc8(@SN0, 7)                                     ' calculate crc of sn
  term.txn("-", 2) 
  term.tx(" ")
  term.fxhex(crc, 2)
  if (crc == SN0[7])                                            ' compare and report
    term.str(string(" (crc verified)", 13))
  else
    term.str(string(" (fail) "))
    repeat
      waitct(0)

  if (SN0[0] <> $28)                                            ' stop demo if not DS18B20
    term.str(string("-- device type error"))
    repeat
      waitct(0)


pub setup()

  term.start(BR_TERM)                                           ' start terminal io


pub wait_for_terminal(clear)

  ' Download to RAM with F10
  ' F12 to open PST
  ' Click [Enable]
  ' Press Enter

  term.rxflush()
  term.rx()
  if (clear)
    term.tx(term.CLS)


con

  { ------------- }
  {  1 - W I R E  }
  { ------------- }


con

  RD_ROM     = $33                                              ' 1W ROM commands
  MATCH_ROM  = $55
  SKIP_ROM   = $CC
  SRCH_ROM   = $F0
  ALARM_SRCH = $EC
  
  CVRT_TEMP  = $44                                              ' DS18xxx commands
  WR_SPAD    = $4E
  RD_SPAD    = $BE
  COPY_SPAD  = $48 
  RD_EE      = $B8
  RD_POWER   = $B4 


dat

  SN0           byte    $00, $00, $00, $00, $00, $00, $00, $00


pub read_sn(p_sn)

'' Reads serial number from 1W device
'' -- stores in array at p_sn
'' -- only connect one device at a time for this method

  tsns.reset()
  tsns.write(RD_ROM)
  repeat 8
    byte[p_sn++] := tsns.read()


pub read_tc() : tc

'' Reads temperature from DS18b20
'' -- skips id, so only one device can be connected
'' -- returns degrees C in 0.0001 degree units

  tsns.reset()               
  tsns.write(SKIP_ROM)                                          ' no serial number needed         
  tsns.write(CVRT_TEMP)                                         ' start temp conversion
  repeat                                                        ' let conversion finish                 
    tc := tsns.rdbit()     
  until (tc == 1)    
  tsns.reset()               
  tsns.write(SKIP_ROM)          
  tsns.write(RD_SPAD)                                           ' read scratchpad         
  tc := tsns.read()                                             ' lsb of temp      
  tc |= tsns.read() << 8                                        ' msb of temp
                                                                 
  tc := ((tc signx 15) sar 4) * 10_000


pub read_tca(p_sn) : tc | i

'' Reads temperature from DS18b20 at specific address
'' -- returns degrees C in 0.0001 degree units
'' -- p_sn is pointer to byte array with serial #

  tsns.reset()               
  tsns.write(MATCH_ROM)                                         ' use serial #
  repeat i from 0 to 7                                          ' send serial #
    tsns.write(byte[p_sn][i])          
  tsns.write(CVRT_TEMP)                                         ' start conversion          
  repeat                                                        ' let conversion finish                 
    tc := tsns.rdbit()     
  until (tc == 1)    
  tsns.reset()               
  tsns.write(MATCH_ROM)
  repeat i from 0 to 7
    tsns.write(byte[p_sn][i])            
  tsns.write(RD_SPAD)                                           ' read scratchpad     
  tc := tsns.read()                                             ' lsb of temp      
  tc |= tsns.read() << 8                                        ' msb of temp
                                                                 
  tc := ((tc signx 15) sar 4) * 10_000


con { license }

{{

  Terms of Use: MIT License

  Permission is hereby granted, free of charge, to any person obtaining a copy of this
  software and associated documentation files (the "Software"), to deal in the Software
  without restriction, including without limitation the rights to use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to the following
  conditions:

  The above copyright notice and this permission notice shall be included in all copies
  or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

}}