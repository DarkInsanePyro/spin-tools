'' =================================================================================================
''
''   File....... jm_tm163x_segs7.spin2
''   Purpose.... Segment maps for TM163x driver chips
''               * may work with other devices
''   Author..... Jon "JonnyMac" McPhalen
''               Copyright (c) 2019-2020 Jon McPhalen
''               -- see below for terms of use
''   E-mail..... jon.mcphalen@gmail.com
''   Started....
''   Updated.... 30 JUN 2020
''
'' =================================================================================================


con { fixed io pins }

  RX1      = 63  { I }                                          ' programming / debug
  TX1      = 62  { O }

  SF_CS    = 61  { O }                                          ' serial flash
  SF_SCK   = 60  { O }
  SF_SDO   = 59  { O }
  SF_SDI   = 58  { I }


pub null()

'' This is not a top-level object


pub digit(n, radix) : result

'' Returns segments for digit
'' -- valid for binary..hex

  if ((radix < 2) or (radix > 16))                              ' check radix (base)
    return 0

  if ((n < 0) or (n >= radix))                                  ' check value
    return 0

  result := HexTable[n]                                         ' good, return segments


pub ascii(ch) : result

'' Returns segments map for ASCII character

  if ((ch < 32) or (ch > 127))                                  ' check range
    return 0                                                    '  blank if bad

  result := AsciiTable[ch-32]                                   ' get map from table


con { segments / character maps }

  BLANK  = %00000000

  SEG_DP = %10000000
  SEG_G  = %01000000
  SEG_F  = %00100000
  SEG_E  = %00010000
  SEG_D  = %00001000
  SEG_C  = %00000100
  SEG_B  = %00000010
  SEG_A  = %00000001

  DASH   = SEG_G
  DOT    = SEG_DP

'        --- a ---
'       |         |
'       f         b
'       |         |
'        --- g ---
'       |         |
'       e         c
'       |         |
'        --- d ---  *

        '  .gfedcba
  _0    = %00111111
  _1    = %00000110
  _2    = %01011011
  _3    = %01001111
  _4    = %01100110
  _5    = %01101101
  _6    = %01111101
  _7    = %00000111
  _8    = %01111111
  _9    = %01101111

  _A    = %01110111
  _b2   = %01111100 { lowercase }
  _C    = %00001100
  _C1   = %00111001
  _d2   = %01011110 { lc }
  _E    = %00001010
  _E1   = %01111001
  _F    = %01110001

        '  .gfedcba
  _c2   = %01011000 { lc }
  _G    = _6
  _H    = %01110110
  _h2   = %01110100 { lc }
  _I    = _1
  _i2   = %00000100 { lc }
  _J    = %00011110
  _L    = %00111000
  _l2   = %00000110 { lc }
  _n2   = %01010100 { lc }
  _O    = _0
  _o2   = %01011100 { lc }
  _P    = %01110011
  _Q    = _9
  _r2   = %01010000 { lc }
  _S    = _5
  _t2   = %01111000 { lc }
  _U    = %00111110
  _u2   = %00011100 { lc }
  _Y    = %01101110

        '  .gfedcba
  _DQt  = %00100010 { " }
  _SQt  = %00000010 { ' }
  _At   = %01111011 { @ }
  _SBLf = _C        { [ }
  _SBRt = %00001111 { ] }
  _UScr = %00001000 { _ }
  _Eq   = %01001000 { = }
  _Qm   = %01010011 { ? }


  D_SYM = %01100011 { degrees symbol }


dat { 7-segment maps }

                        ' convert non-printing control chars to Hex table

  HexTable      byte       _0,    _1,    _2,    _3,    _4,    _5,    _6,    _7
                byte       _8,    _9,    _A,   _b2,    _C,   _d2,    _E,    _F

                        ' 7-seg ASCII chars

  AsciiTable    byte    BLANK, BLANK,  _DQt, BLANK, BLANK, BLANK, BLANK,  _SQt
                byte    BLANK, BLANK, BLANK, BLANK, BLANK,  DASH,   DOT, BLANK
                byte       _0,    _1,    _2,    _3,    _4,    _5,    _6,    _7
                byte       _8,    _9, BLANK, BLANK, BLANK,   _Eq, BLANK,   _Qm
                byte      _At,    _A, BLANK,   _C1, BLANK,   _E1,    _F,    _G
                byte       _H,    _I,    _J, BLANK,    _L, BLANK, BLANK,    _O
                byte       _P,    _Q, BLANK,    _S, BLANK,    _U, BLANK, BLANK
                byte    BLANK,    _Y, BLANK, _SBLf, BLANK, _SBRt, BLANK, _UScr
                byte    BLANK, BLANK,   _b2,   _c2,   _d2, BLANK, BLANK, BLANK
                byte      _h2,   _i2, BLANK, BLANK,   _l2, BLANK,   _n2,   _o2
                byte    BLANK, BLANK,   _r2, BLANK,   _t2,   _u2, BLANK, BLANK
                byte    BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK


con { license }

{{

  Terms of Use: MIT License

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

}}
