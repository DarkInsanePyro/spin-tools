'' =================================================================================================
''
''   File....... jm_sircs_tx.spin2
''   Purpose.... Transmit Sony IRCS codes using a smart pin and IR LED
''   Author..... Jon "JonnyMac" McPhalen
''               Copyright (c) 2020 Jon McPhalen
''               -- see below for terms of use
''   E-mail..... jon.mcphalen@gmail.com
''   Started....
''   Updated.... 22 JUL 2020
''
'' =================================================================================================


con { fixed io pins }

  RX1      = 63  { I }                                          ' programming / debug
  TX1      = 62  { O }

  SF_CS    = 61  { O }                                          ' serial flash
  SF_SCK   = 60  { O }
  SF_SDO   = 59  { O }
  SF_SDI   = 58  { I }


con

  #0, NO_COG                                                    ' program blocked while transmitting
  #1, USE_COG                                                   ' SIRCS transmitted in background


var

  long  cog                                                     ' cog for backgroun transmission
  long  stack[32]                                               ' stack space for background cog

  long  lp                                                      ' IR LED pin
  long  frametix                                                ' ticks in 45ms
  long  setup                                                   ' SIRCS pin configured


pub null()

'' This is not a top level object


pub start(pin, freq)

'' Configure pin for modulated output
'' -- signal is active-high
'' -- freq is modulation frequency in Hz (e.g., 40_000)

  stop()

  lp := pin                                                     ' save pin (control)
  pinstart(lp, P_NCO_FREQ | P_OE, 1, freq frac clkfreq)         ' configure for NCO output
  pinfloat(lp)                                                  ' disable pin

  frametix := clkfreq / 1000 * 45                               ' ticks in 45ms
  setup := true


pub stop()

'' Stop/clear SIRCS process if configured

  if (setup)                                                    ' configured for another pin
    if (cog)                                                    ' bkg transmission running?
      cogstop(cog-1)                                            ' if yes, stop it
      cog := 0
    pinclear(lp)                                                ' clear old smart pin config

  longfill(@lp, 0, 3)                                           ' mark stopped


pub tx(cmd, bits, count, mode) : result

'' Transmit SIRCS command
'' -- cmd is value to be transmitted (LSBFIRST)
'' -- bits is number of bits in command to transmit (12, 15, or 20)
''    * Warning: transmitting more than 20 bits may cause program hang due to frame timing
'' -- count is number of times to repeat transmission of cmd
'' -- mode is NO_COG (blocking) or USE_COG (transmits in background)

  if (cog)                                                      ' transmitting now?
    cogstop(cog-1)                                              ' if yes, stop
    cog := 0

  if (count <= 0)                                               ' abort on bad count
    return 0
  else
    count := 1 #> count <# 5                                    ' limit repeats, 1 to 5

  if (mode == NO_COG)
    transmit(cmd, bits, count)                                  ' blocking transmit (45ms/count)
  else
    cog := cogspin(NEWCOG, transmit(cmd, bits, count), @stack) + 1
    return cog


pub busy() : result

'' Returns true while background cog is transmitting

  return (cog) ? true : false


pri transmit(cmd, bits, count) | t, out                         ' called from tx()

'' Transmit SIRCS command
'' -- consumes 45ms/count

  t := getct()                                                  ' start SIRCS frame
  repeat count
    pinlow(lp)                                                  ' enable modulation
    waitus(2400)                                                ' 2.4ms start bit
    pinfloat(lp)                                                ' stop modulation
    waitus(600)                                                 ' 0.6ms gap
    out := cmd rev 31                                           ' flip bits, out.0 to out.31
    repeat bits                                                 ' loop through bits
      pinlow(lp)                                                ' enable modulation
      waitus(((out rol= 1) & 1) ? 1200 : 600)                   ' set bit delay (1.2 or 0.6ms)
      pinfloat(lp)                                              ' led off
      waitus(600)                                               ' 0.6ms gap
    waitct(t += frametix)                                       ' let frame timing expire

  if (cog)                                                      ' running in background?
    cog := 0                                                    ' if yes, mark done
    cogstop(cogid())                                            '  and unload


con { license }

{{

  Terms of Use: MIT License

  Permission is hereby granted, free of charge, to any person obtaining a copy of this
  software and associated documentation files (the "Software"), to deal in the Software
  without restriction, including without limitation the rights to use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to the following
  conditions:

  The above copyright notice and this permission notice shall be included in all copies
  or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

}}