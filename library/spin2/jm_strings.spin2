'' =================================================================================================
''
''   File....... jm_strings.spin2
''   Purpose.... Miscellaneous string methods
''   Author..... Jon "JonnyMac" McPhalen
''               Copyright (c) 2011-2022 Jon McPhalen
''               -- see below for terms of use
''   E-mail..... jon.mcphalen@gmail.com
''   Started....
''   Updated.... 04 JAN 2022
''
''   {$P2}
''
'' =================================================================================================


obj

  nstr : "jm_nstr"                                              ' numeric formatting routines


pub null()

'' This is not a top-level object


pub upper(c) : result

'' Convert c to uppercase
'' -- does not modify non-alphas

  if ((c >= "a") && (c <= "z"))
    c &= %11011111

  return c


pub ucstr(p_str) : result | c

'' Converts string at p_str to uppercase

  org
                mov       result, p_str                         ' point to source string
.top            rdbyte    c, p_str                              ' get char
                tjz       c, #.done                             ' if null, exit
                cmp       c, #"a"                       wcz
    if_b        jmp       #.next
                cmp       c, #"z"                       wcz
    if_a        jmp       #.next
                and       c, #%11011111                         ' make uppercase
                wrbyte    c, p_str                              ' update this byte in string
.next           add       p_str, #1                             ' point to next byte
                jmp       #.top
.done
  end


pub lower(c) : result

'' Convert c to lowercase
'' -- does not modify non-alphas

  if ((c >= "A") && (c <= "Z"))
    c |= %00100000

  return c


pub lcstr(p_str) : result | c

'' Converts string at p_str to lower case

  org
                mov       result, p_str                         ' point to source string
.top            rdbyte    c, p_str                              ' get byte
                tjz       c, #.done                             ' if null, exit
                cmp       c, #"A"                       wcz
    if_b        jmp       #.next
                cmp       c, #"Z"                       wcz
    if_a        jmp       #.next
                or        c, #%00100000                         ' make lowercase
                wrbyte    c, p_str                              ' update this byte in string
.next           add       p_str, #1                             ' point to next byte
                jmp       #.top
.done
  end


pub is_alpha(c) : result

'' Returns true if c is alpha character

  if ((c >= "a") && (c <= "z"))
    return true
  elseif ((c >= "A") && (c <= "Z"))
    return true
  else
    return false


pub is_digit(c) : result

'' Returns true if c is digit character

  if ((c >= "0") && (c <= "9"))
    return true
  else
    return false


pub is_alphanum(c) : result

'' Returns true if c is alpha/numeric character

  return (is_alpha(c) || is_digit(c))


pub is_space(c) : result

'' Returns true if c a st && ard whitespace character

  return (lookdown(c : $20, $09, $0A, $0B, $0C, $0D) > 0)


pub is_decimal(p_str) : result | c

'' Returns true if string is decimal format
'' -- separator okay, but no whitespace

  c := byte[p_str]
  if ((c == "+") || (c == "-"))
    p_str++

  repeat strsize(p_str)
    c := byte[p_str++]
    ifnot (lookdown(c : "0".."9", ".", "_"))
      return false

  return true


pub is_binary(p_str) : result | c

'' Returns true if string is binary format
'' -- excludes format indicator (%)
'' -- separator okay

  if (byte[p_str] == "%")
    ++p_str

  repeat strsize(p_str)
    c := byte[p_str++]
    ifnot (lookdown(c : "0".."1", "_"))
      return false

  return true


pub is_hex(p_str) : result | c

'' Returns true if string is hexadecimal format
'' -- excludes format indicator ($)
'' -- separator okay

  if (byte[p_str] == "$")
    ++p_str

  repeat strsize(p_str)
    c := upper(byte[p_str++])
    ifnot (lookdown(c : "0".."9", "A".."F", "_"))
      return false

  return true


pub is_number(p_str) : result

'' Returns true if string is number in known format (dec, bin, or hex)
'' -- binary and hex must be indicated

  if (is_binary(p_str))
    return true

  if (is_hex(p_str))
    return true

  if lookdown(byte[p_str] : "+-.", "0".."9")
    return is_decimal(p_str+1)

  return false


pub nc_strcomp(p_str1, p_str2) : result

'' Case-insensitve comparison of two strings
'' -- for case-sensitivity use strcmp()

  if (strsize(p_str1) <> strsize(p_str2))
    return false

  repeat strsize(p_str1)
    if (upper(byte[p_str1++]) <> upper(byte[p_str2++]))
      return false

  return true


pub strncmp(p_str1, p_str2, n) : match

'' Compares n characters of str2 with str1
'' -- p_str1 and p_str2 are pointers to strings (byte arrays)
'' -- 0 if str1 == str2, 1 if str1 > str2, -1 if str1 < str2

  if (n > 0)
    repeat n
      if (byte[p_str1] > byte[p_str2])
        match := 1
        quit
      elseif (byte[p_str1] < byte[p_str2])
        match := -1
        quit
      else
        ++p_str1
        ++p_str2


pub fillstr(p_str, c) : result

'' Fills string at p_str with character c

  bytefill(p_str, c, strsize(p_str))

  return p_str


pub instr(p_haystack, p_needle) : pos | len1, len2, idx

'' Returns position of p_needle in str1
'' -- p_haystack is pointer to string to search
'' -- p_needle is pointer to string to look for in p_haystack
'' -- if p_needle not in p_haystack returns -1

  pos  := -1

  len1 := strsize(p_haystack)
  len2 := strsize(p_needle)
  idx  := 0

  if (len1 >= len2)
    repeat (len1 - len2 + 1)
      if (byte[p_haystack] == 0)
        quit
      else
        if (strncmp(p_haystack++, p_needle, len2) == 0)
          pos := idx
          quit
        else
          ++idx


pub first(p_str, c) : idx | check

'' Returns first position of character c in string at p_str
'' -- returns -1 if not found

  repeat idx from 0 to strsize(p_str)-1
    check := byte[p_str][idx]
    if (check == c)
      return idx

  return -1


pub last(p_str, c) : pos

'' Returns last position of character c in string at p_str
'' -- returns -1 if not found

  pos := strsize(p_str)

  repeat strsize(p_str)
    if (byte[p_str][pos] == c)
      return pos
    pos -= 1

  return -1                                                     ' return not found


pub chcount(p_str, c) : n

'' Returns count of times character c appears in p_str

  repeat strsize(p_str)
    if (byte[p_str++] == c)
      ++n


pub fields(p_str, sepchar) : fc | len

'' Returns number of fields in string
'' -- fields are separated by sepchar

  len := strsize(p_str)
  if (len > 0)
    fc := 1
    repeat len
      if (byte[p_str++] == sepchar)
        ++fc


pub field_pntr(p_str, n, sepchar) : result | c

'' Returns pointer to field following nth appearance of sepchar
'' -- p_str is pointer to source string
'' -- n is the field number
'' -- sepchar is the field seperating character

  repeat while (n > 0)
    c := byte[p_str++]
    if (c == sepchar)
      n -= 1
    elseif (c == 0)
      return -1

  return p_str


pub copy_field(p_dest, p_src, sepchar, len) : result | c

'' Copies field starting at p_src to p_dest
'' -- stops at sepchar or 0
'' -- len is maximum length of string

  result := p_dest

  repeat len
    c := byte[p_src++]
    if (c == sepchar)
      c := 0
    byte[p_dest++] := c
    if (c == 0)
      quit

  if (c <> 0)
    byte[p_dest] := 0


pub replace(tc, nc, p_str) : result | b

'' Replaces target character (tc) in string at p_str witn new character (nc)

  org
                mov       result, p_str
.top            rdbyte    b, p_str
                tjz       b, #.done
                cmp       b, tc                         wcz
    if_e        wrbyte    nc, p_str
                add       p_str, #1
                jmp       #.top
.done
  end


pub get_char(p_str, n) : result

'' Returns nth character from str at p_str

  if (n < strsize(p_str))
    return byte[p_str][n]
  else
    return 0


pub append_char(p_str, c) : result | pos

'' Append c to the end of p_str
'' -- use with caution
''    * p_str buffer must accomodate new size

  result := p_str

  p_str += strsize(p_str)
  byte[p_str++] := c
  byte[p_str] := 0


pub append_str(p_dest, p_src) : result | pos

'' Append p_src to the end of p_dest
'' -- use with caution
''    * p_dest buffer must accomodate new size

  result := p_dest

  p_dest += strsize(p_dest)
  bytemove(p_dest, p_src, strsize(p_src)+1)


pub left(p_dest, p_src, n) : result

'' Copies left len characters from src string to dest string
'' -- p_dest and p_src are pointers to string buffers

  result := p_dest

  n <#= strsize(p_src)
  bytemove(p_dest, p_src, n)
  byte[p_dest][n] := 0


pub right(p_dest, p_src, n) : result | size

'' Copies right n characters from src string to dest string
'' -- p_dest and p_src are pointers to string buffers

  result := p_dest

  size := strsize(p_src)
  bytemove(p_dest, p_src+(size-n), n+1)


pub mid(p_dest, p_src, start, n) : result

'' Copies middle n characters from src string to dest string
'' -- p_dest and p_src are pointers to string buffers
'' -- start is zero indexed

  result := p_dest                                              ' save destination

  p_src += start                                                ' bump start address
  n <#= strsize(p_src)                                          ' keep size legal

  bytemove(p_dest, p_src, n)
  byte[p_dest][n] := 0                                          ' terminate updated dest string


pub ltrim(p_str) : result | idx

'' Trims leading whitespace(s) from string at p_str

  result, idx := p_str, 0

  repeat
    if (is_space(byte[p_str][idx]))
      ++idx
    else
      quit

  if (idx > 0)                                                  ' if spaces
    bytemove(p_str, p_str+idx, strsize(p_str)-idx+1)            '  move sub-string + 0 left


pub rtrim(p_str) : result | idx, fini

'' Trims trailing whitespaces from string at p_str

  result := p_str                                               ' save string address

  idx := fini := strsize(p_str) - 1                             ' get index of last char in string

  repeat
    ifnot (is_space(byte[p_str][idx]))
      quit
    else
      --idx

  if (idx < fini)                                               ' if spaces at end
    byte[p_str][idx+1] := 0                                     '  truncate


pub trim(p_str) : result

'' Trims leading and trailing spaces from string at p_str

  rtrim(p_str)
  return ltrim(p_str)


pub concat(p_str1, p_str2, p_buf) : result

'' Concatenates strings; result to p_buf
'' -- p_buf must be large enough to accomodate result string

  result := p_buf

  if (p_str1 <> p_buf)
    bytemove(p_buf, p_str1, strsize(p_str1))

  bytemove(p_buf+strsize(p_str1), p_str2, strsize(p_str2)+1)


pub str_index(p_str, p_list, lcount) : idx

'' Returns index of string (at p_str) in list of strings (at p_list)
'' -- lcount is number of strings in list
'' -- search is case sensitive

  repeat lcount
    if (strcomp(p_str, p_list))
      return idx
    else
      ++idx
      p_list += strsize(p_list) + 1

  return -1


pub nc_str_index(p_str, p_list, lcount) : idx

'' Returns index of string (at p_str) in list of strings (at p_list)
'' -- lcount is number of strings in list
'' -- search is NOT case sensitive

  repeat lcount
    if (nc_strcomp(p_str, p_list))
      return idx
    else
      ++idx
      p_list += strsize(p_list) + 1

  return -1


pub str_pntr(idx, p_list) : result

'' Returns pointer to idx'th string in list (at p_list)
'' -- strings may be variable length

  repeat idx
    p_list += strsize(p_list) + 1                               ' skip current string

  return p_list


con

  { --------------------- }
  {  Numeric conversions  }
  { --------------------- }


pub asc2val(p_str) : result | c

'' Returns value of numeric string
'' -- p_str is pointer to string
'' -- binary (%)  &&  hex ($) must be indicated

  repeat
    c := byte[p_str]
    case c
      " ":                                                      ' skip leading space(s)
        p_str++

      "+", "-", ".", "0".."9":                                  ' found decimal value
        return asc2dec(p_str, 11)

      "%":                                                      ' found binary value
        return bin2dec(p_str, 32)

      "$":                                                      ' found hex value
        return hex2dec(p_str, 8)

      other:                                                    ' abort on bad character
        return 0


pub asc2dec(p_str, n) : value | sign, c

'' Returns signed value from decimal string
'' -- p_str is pointer to valid decimal string
'' -- n is maximum number of digits to process
'' -- decimal point is ignored
''    * application should note position of dpoint for appropriate scaling

  if (n < 1)                                                    ' if bogus, bail out
    return 0

  value := 0                                                    ' initialize value
  sign := 1                                                     ' assume positive

  ' trim leading chars (spaces / sign)

  repeat
    c := byte[p_str]
    case c
      " ":                                                      ' skip leading space(s)
        p_str++

      "0".."9":                                                 ' found #s, extract value
        quit

      "+", "_", ".":
        p_str++                                                 ' skip sign, extract value
        quit

      "-":
        sign := -1                                              ' value is negative
        p_str++                                                 ' skip sign, extract value
        quit

      other:                                                    ' abort on bad character
        return 0

  ' extract numeric character
  ' -- can contain comma  &&  underscore separators

  n <#= 10                                                      ' limit to 10 digits

  repeat while (n > 0)
    c := byte[p_str++]
    case c
      "0".."9":                                                 ' digit?
        value := (value * 10) + (c - "0")                       '  update value
        n--

      "_", ".":
        { ignore }

      other:
        quit

  value *= sign


pub bin2dec(p_str, n) : value | flag, c

'' Returns value from {indicated} binary string
'' -- p_str is pointer to binary string
'' -- n is maximum number of digits to process

  if (n < 1)                                                    ' if bogus, bail out
    return 0

  flag := false

  repeat
    c := byte[p_str]
    case c
      " ":                                                      ' skip leading space(s)
        p_str++

      "%":                                                      ' found indicator
        p_str++                                                 '  move to value
        quit

      "0".."1":                                                 ' found value
        quit

      other:                                                    ' abort on bad character
        return 0

  n <#= 32                                                      ' limit chars in value

  repeat while (n)
    c := byte[p_str++]                                          ' get next character
    case c
      "0".."1":                                                 ' binary digit?
        value := (value << 1) | (c - "0")                       '  update value
        --n                                                     '  dec digits count

      "_":
        ' skip

      other:
        quit


pub hex2dec(p_str, n) : value | c

'' Returns value from {indicated} hex string
'' -- p_str is pointer to binary string
'' -- n is maximum number of digits to process

  if (n < 1)                                                    ' if bogus, bail out
    return 0

  repeat
    c := upper(byte[p_str])
    case c
      " ":                                                      ' skip leading space(s)
        p_str++

      "$":                                                      ' found indicator
        p_str++                                                 '  move to value
        quit

      "0".."9", "A".."F":                                       ' found value
        quit

      other:                                                    ' abort on bad character
        return 0

  n <#= 8                                                       ' limit field width

  repeat while (n)
    c := upper(byte[p_str++])
    case c
      "0".."9":                                                 ' digit?
        value := (value << 4) | (c - "0")                       '  update value
        --n                                                     '  dec digits count

      "A".."F":                                                 ' hex digit?
        value := (value << 4) | (c - "A" + 10)
        --n

      "_":
        { skip }

      other:
        quit


con

  { --------------------- }
  {  Numeric Conversions  }
  { --------------------- }


pub dec(value, p_dest) : p_src

'' Converts value to decimal formatted string
'' -- p_dest is pointer to destination buffer
''    * if p_dest is < 1, string is not copied to external buffer
'' -- string is terminated

  p_src := nstr.dec(value, 0)

  if (p_dest > 0)
    bytemove(p_dest, p_src, strsize(p_src)+1)


pub rjdec(value, width, pchar, p_dest) : p_src

'' Converts value to right-justified decimal string
'' -- fwidth is width of (padded) field for value
''    * must add 1 if field could be negative
'' -- pchar is [leading] pad character (usually "0" or " ")
'' -- p_dest is pointer to destination buffer
''    * if p_dest is < 1, string is not copied to external buffer
'' -- string is terminated

  p_src := nstr.fmt_number(value, "d", 0, width, pchar)

  if (p_dest > 0)
    bytemove(p_dest, p_src, strsize(p_src)+1)


pub dpdec(value, width, dp, p_dest) : p_src

'' Convert value to fixed-point decimal string
'' -- width is width of entire field
''    * Use 0 for left-justification
'' -- dp is the number of digits after the decimal point
''    * e.g., dp of 3 will result in a format of x.xxx
'' -- p_dest is pointer to destination buffer
''    * if p_dest is < 1, string is not copied to external buffer
'' -- string is terminated

  p_src := nstr.fmt_number(value, "f", dp, width, " ")

  if (p_dest > 0)
    bytemove(p_dest, p_src, strsize(p_src)+1)


pub hex(value, p_dest) : p_src

'' Convert value to hexadecimal string
'' -- p_dest is pointer to destination buffer
''    * if p_dest is < 1, string is not copied to external buffer
'' -- string is terminated

  p_src := nstr.itoa(value, 16, 0)

  if (p_dest > 0)
    bytemove(p_dest, p_src, strsize(p_src)+1)


pub fxhex(value, digits, p_dest) : p_src

'' Convert value to hexadecimal string
'' -- digits is 1 to 8 (adds leading 0s)
'' -- p_dest is pointer to destination buffer
''    * if p_dest is < 1, string is not copied to external buffer
'' -- string is terminated

  p_src := nstr.itoa(value, 16, digits)

  if (p_dest > 0)
    bytemove(p_dest, p_src, strsize(p_src)+1)


pub bin(value, p_dest) : p_src

'' Convert value to binary string
'' -- p_dest is pointer to destination buffer
''    * if p_dest is < 1, string is not copied to external buffer
'' -- string is terminated

  p_src := nstr.itoa(value, 2, 0)

  if (p_dest > 0)
    bytemove(p_dest, p_src, strsize(p_src)+1)


pub fxbin(value, width, p_dest) : p_src

'' Convert value to binary string
'' -- width varies with value (1 to 32 digits)
'' -- p_dest is pointer to destination buffer
''    * if p_dest is < 1, string is not copied to external buffer
'' -- string is terminated

  p_src := nstr.itoa(value, 2, width)

  if (p_dest > 0)
    bytemove(p_dest, p_src, strsize(p_src)+1)


con { license }

{{

  Terms of Use: MIT License

  Permission is hereby granted, free of charge, to any person obtaining a copy of this
  software  &&  associated documentation files (the "Software"), to deal in the Software
  without restriction, including without limitation the rights to use, copy, modify,
  merge, publish, distribute, sublicense,  && /or sell copies of the Software,  &&  to
  permit persons to whom the Software is furnished to do so, subject to the following
  conditions:

  The above copyright notice  &&  this permission notice shall be included in all copies
  or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  PARTICULAR PURPOSE  &&  NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

}}
