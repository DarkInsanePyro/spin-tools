'' =================================================================================================
''
''   File....... jm_ez_button.spin2
''   Purpose.... Configure P2 pin as a N.O. button or switch input with pull-up or pull-down
''   Author..... Jon "JonnyMac" McPhalen
''               Copyright (c) 2020 Jon McPhalen
''               -- see below for terms of use
''   E-mail..... jon.mcphalen@gmail.com
''   Started....
''   Updated.... 29 JUN 2020
''
''   {$P2} 
''
'' =================================================================================================


con { fixed io pins }

  RX1      = 63  { I }                                          ' programming / debug
  TX1      = 62  { O }                                           
                                                                 
  SF_CS    = 61  { O }                                          ' serial flash
  SF_SCK   = 60  { O }                                           
  SF_SDO   = 59  { O }                                           
  SF_SDI   = 58  { I }                                           


con

  #true,  ON, OFF 
  #false, NO, YES

  #0, LOW, HIGH                                                 ' input modes
  #0, PULLUP, PULLDOWN                                          ' mode configurations
  

var

  byte  btn
  byte  instate
  byte  setup


pub null()

'' This is not a top-level object


pub start(pin, mode) : result

'' Configure IO pin
'' -- pin is 0..57
'' -- mode is 0 for active-low, 1 for active-high

  stop()

  if ((pin >= 0) && (pin < SF_SDI))                             ' if good pin
    btn := pin                                                  ' save pin #
    pinclear(btn)                                               ' clear smart pin
    pinfloat(btn)                                               ' release dirx
    instate := (mode) ? HIGH : LOW                              ' clean-up active state (0 or 1)
    if (instate)                                                ' configure for input state
      wrpin(btn, P_LOW_15K)                                     ' select pull-down
      pinlow(btn)                                               ' activate
    else
      wrpin(btn, P_HIGH_15K)                                    ' select pull-up
      pinhigh(btn)                                              ' activate
    result := setup := true


pub stop()

'' Clear pin configuration 
'' -- release pull-up/down

  if (setup)
    pinclear(btn)                                               ' clear configuration
    pinfloat(btn)                                               ' release dirx
    bytefill(@btn, 0, 3)                                        ' mark stopped

                                                        
pub active() : result

'' Returns true if button pressed

  return (pinread(btn) == instate)


pub debounce(ms) : result

'' Returns true if button pressed and held during debounce period
'' -- exits early if button not active or released during debounce

  repeat ms                                                     ' run debounce timing
    waitms(1)
    if (pinread(btn) <> instate)                                ' abort if btn released
      return false

  return true     


con { license }

{{

  Terms of Use: MIT License

  Permission is hereby granted, free of charge, to any person obtaining a copy of this
  software and associated documentation files (the "Software"), to deal in the Software
  without restriction, including without limitation the rights to use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to the following
  conditions:

  The above copyright notice and this permission notice shall be included in all copies
  or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

}}