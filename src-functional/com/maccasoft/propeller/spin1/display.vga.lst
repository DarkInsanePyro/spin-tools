0000     00B71B00      Frequency 12000000 Hz
0004     00            RCFast
0005     B9            Check Sum
0006     0010          Base of Program
0008     0384          Base of Variables
000A     0390          Base of Stack
000C     036C          Initial Program Counter
000E     0398          Initial Stack Pointer
                       File "display.vga.spin"
0010     0374 0003     Link to Next Object
0014     035C 0000     Link to PUB start(vgaptr) : okay
0018     036A 0000     Link to PUB stop
001C 000               DAT
001C 000                                       org
001C 000 A0FDA84F      entry                   mov     taskptr,#tasks          'reset tasks
0020 001 A0FDB008                              mov     x,#8                    'perform task sections initially
0024 002 5CBDAAD4      :init                   jmpret  taskret,taskptr
0028 003 E4FDB002                              djnz    x,#:init
002C 004 A0BDCCE7      superfield              mov     hv,hvbase               'set hv
0030 005 A0FDCA00                              mov     interlace,#0            'reset interlace
0034 006 627DD804                              test    _mode,#%0100    wz      'get interlace into nz
0038 007 083D9BF0      field                   wrlong  visible,par             'set status to visible
003C 008 EC7DBA0C                              tjz     vb,#:nobl               'do any visible back porch lines
0040 009 A0BDB0DD                              mov     x,vb
0044 00A 54FC8580                              movd    bcolor,#colortable
0048 00B 5CFC9C3C                              call    #blank_line
004C 00C               :nobl
004C 00C A0BDC2ED                              mov     screen,_screen          'point to first tile (upper-leftmost)
0050 00D A0BDB2F0                              mov     y,_vt                   'set vertical tiles
0054 00E A0BDBEF2      :line                   mov     vx,_vx                  'set vertical expand
0058 00F 6CD5CA01      :vert   if_nz           xor     interlace,#1            'interlace skip?
005C 010 EC55CA25              if_nz           tjz     interlace,#:skip
0060 011 EC7DB614                              tjz     hb,#:nobp               'do any visible back porch pixels
0064 012 A0BFFEDB                              mov     vscl,hb
0068 013 FC7F0000                              waitvid colortable,#0
006C 014               :nobp
006C 014 A0BDB0EF                              mov     x,_ht                   'set horizontal tiles
0070 015 A0BFFEDE                              mov     vscl,hx                 'set horizontal expand
0074 016 04BDC4E1      :tile                   rdword  tile,screen             'read tile
0078 017 80BDC4CE                              add     tile,line               'set pointer bits into tile
007C 018 24FDC406                              rol     tile,#6                 'read tile pixels
0080 019 08BDC6E2                              rdlong  pixels,tile             '(8 clocks between reads)
0084 01A 28FDC410                              shr     tile,#10+6              'set tile colors
0088 01B 54BC3AE2                              movd    :color,tile
008C 01C 80FDC202                              add     screen,#2               'point to next tile
0090 01D FC3F00E3      :color                  waitvid colortable,pixels       'pass colors and pixels to video
0094 01E E4FDB016                              djnz    x,#:tile                'another tile?
0098 01F 84BDC2E0                              sub     screen,hc2x             'repoint to first tile in same line
009C 020 EC7DB423                              tjz     hf,#:nofp               'do any visible front porch pixels
00A0 021 A0BFFEDA                              mov     vscl,hf
00A4 022 FC7F0000                              waitvid colortable,#0
00A8 023               :nofp
00A8 023 A0FDB001                              mov     x,#1                    'do hsync
00AC 024 5CFC9C44                              call    #blank_hsync            '(x=0)
00B0 025 E4FDBE0F      :skip                   djnz    vx,#:vert               'vertical expand?
00B4 026 20BD9CD0                              ror     line,linerot            'set next line
00B8 027 81BD9CE4                              add     line,lineadd    wc
00BC 028 24BD9CD0                              rol     line,linerot
00C0 029 5C4C000E              if_nc           jmp     #:line
00C4 02A 80BDC2E0                              add     screen,hc2x             'point to first tile in next line
00C8 02B E5FDB20E                              djnz    y,#:line        wc      'another tile line? (c=0)
00CC 02C EC7DB830                              tjz     vf,#:nofl               'do any visible front porch lines
00D0 02D A0BDB0DC                              mov     x,vf
00D4 02E 54FC8580                              movd    bcolor,#colortable
00D8 02F 5CFC9C3C                              call    #blank_line
00DC 030               :nofl
00DC 030 6FD5CA01              if_nz           xor     interlace,#1    wc,wz   'get interlace and field1 into nz (c=0/?)
00E0 031 082999F0              if_z            wrlong  invisible,par           'unless interlace and field1, set status to invisible
00E4 032 A0FDA84F                              mov     taskptr,#tasks          'reset tasks
00E8 033 C9BDB0FA                              addx    x,_vf           wc      'do invisible front porch lines (x=0 before, c=0 after)
00EC 034 5CFC9C3C                              call    #blank_line
00F0 035 A0BDB0FB                              mov     x,_vs                   'do vsync lines
00F4 036 5CFC9C3B                              call    #blank_vsync
00F8 037 A0BDB0FC                              mov     x,_vb                   'do invisible back porch lines, except last
00FC 038 5CFC9C3B                              call    #blank_vsync
0100 039 5C540007              if_nz           jmp     #field                  'if interlace and field1, display field2
0104 03A 5C7C0004                              jmp     #superfield             'else, new superfield
0108 03B 857DCA02      blank_vsync             cmp     interlace,#2    wc      'vsync (c=1)
010C 03C A0BFFEE8      blank_line              mov     vscl,h1                 'blank line or vsync-interlace?
0110 03D 808FFEE9              if_nc           add     vscl,h2
0114 03E 6CD1CC01              if_c_and_nz     xor     hv,#%01
0118 03F FC71CC00              if_c            waitvid hv,#0
011C 040 A0B3FEE9              if_c            mov     vscl,h2                 'blank line or vsync-normal?
0120 041 6CE1CC01              if_c_and_z      xor     hv,#%01
0124 042 FC7DCC00      bcolor                  waitvid hv,#0
0128 043 5C8DAAD4              if_nc           jmpret  taskret,taskptr         'call task section (z undisturbed)
012C 044 A0BFFEF6      blank_hsync             mov     vscl,_hf                'hsync, do invisible front porch pixels
0130 045 FC7DCC00                              waitvid hv,#0
0134 046 A0BFFEF7                              mov     vscl,_hs                'do invisble sync pixels
0138 047 6CFDCC02                              xor     hv,#%10
013C 048 FC7DCC00                              waitvid hv,#0
0140 049 A0BFFEF8                              mov     vscl,_hb                'do invisible back porch pixels
0144 04A 6CFDCC02                              xor     hv,#%10
0148 04B FC7DCC00                              waitvid hv,#0
014C 04C E5FDB03C                              djnz    x,#blank_line   wc      '(c=0)
0150 04D 54FC84E6                              movd    bcolor,#hv
0154 04E               blank_hsync_ret
0154 04E               blank_line_ret
0154 04E 5C7C0000      blank_vsync_ret         ret
0158 04F A0BDADF0      tasks                   mov     t1,par                  'load parameters
015C 050 54FCA6EA                              movd    :par,#_enable           '(skip _status)
0160 051 A0FDAE14                              mov     t2,#paramcount - 1
0164 052 80FDAC04      :load                   add     t1,#4
0168 053 08BC00D6      :par                    rdlong  0,t1
016C 054 80BCA6CA                              add     :par,d0
0170 055 E4FDAE52                              djnz    t2,#:load               '+164
0174 056 A0FDAC02                              mov     t1,#2                   'set video pins and directions
0178 057 2CBDACEB                              shl     t1,_pins                '(if video disabled, pins will drive low)
017C 058 84FDAC01                              sub     t1,#1
0180 059 617DD620                              test    _pins,#$20      wc
0184 05A 60FDD638                              and     _pins,#$38
0188 05B 28BDACEB                              shr     t1,_pins
018C 05C 50BFFCD6                              movs    vcfg,t1
0190 05D 2CBDACEB                              shl     t1,_pins
0194 05E 28FDD603                              shr     _pins,#3
0198 05F 54BFFCEB                              movd    vcfg,_pins
019C 060 A08FECD6              if_nc           mov     dira,t1
01A0 061 A0CFEE00              if_nc           mov     dirb,#0
01A4 062 A0F3EC00              if_c            mov     dira,#0
01A8 063 A0B3EED6              if_c            mov     dirb,t1                 '+14
01AC 064 EC7DD4BD                              tjz     _enable,#disabled       '+2, disabled?
01B0 065 5CBDA8D5                              jmpret  taskptr,taskret         '+1=181, break and return later
01B4 066 08FDAC00                              rdlong  t1,#0                   'make sure CLKFREQ => 16MHz
01B8 067 28FDAC01                              shr     t1,#1
01BC 068 853DACC8                              cmp     t1,m8           wc
01C0 069 5C7000BD              if_c            jmp     #disabled               '+8
01C4 06A 48BDFAC6                              min     _rate,pllmin            'limit _rate to pll range
01C8 06B 4CBDFAC7                              max     _rate,pllmax            '+2
01CC 06C A0FDAC0B                              mov     t1,#%00001_011          'set ctra configuration
01D0 06D 853D90FD      :max                    cmp     m8,_rate        wc      'adjust rate to be within 4MHz-8MHz
01D4 06E 28F1FA01              if_c            shr     _rate,#1                '(vco will be within 64MHz-128MHz)
01D8 06F 80F1AC01              if_c            add     t1,#%00000_001
01DC 070 5C70006D              if_c            jmp     #:max
01E0 071 853DFAC9      :min                    cmp     _rate,m4        wc
01E4 072 2CF1FA01              if_c            shl     _rate,#1
01E8 073 84F1B001              if_c            sub     x,#%00000_001
01EC 074 5C700071              if_c            jmp     #:min
01F0 075 58BFF0D6                              movi    ctra,t1                 '+22
01F4 076 08FDAC00                              rdlong  t1,#0                   'divide _rate/CLKFREQ and set frqa
01F8 077 A0FDCE21                              mov     hvbase,#32+1
01FC 078 E1BDFAD6      :div                    cmpsub  _rate,t1        wc
0200 079 34FDAE01                              rcl     t2,#1
0204 07A 2CFDFA01                              shl     _rate,#1
0208 07B E4FDCE78                              djnz    hvbase,#:div            '(hvbase=0)
020C 07C A0BFF4D7                              mov     frqa,t2                 '+136
0210 07D 617DD801                              test    _mode,#%0001    wc      'make hvbase
0214 07E 74BDCED1                              muxnc   hvbase,vmask
0218 07F 617DD802                              test    _mode,#%0010    wc
021C 080 74BDCED2                              muxnc   hvbase,hmask            '+4
0220 081 5CBDA8D5                              jmpret  taskptr,taskret         '+1=173, break and return later
0224 082 A0BDBCF1                              mov     hx,_hx                  'compute horizontal metrics
0228 083 2CFDBC08                              shl     hx,#8
022C 084 68BDBCF1                              or      hx,_hx
0230 085 2CFDBC04                              shl     hx,#4
0234 086 A0BDC0EF                              mov     hc2x,_ht
0238 087 2CFDC001                              shl     hc2x,#1
023C 088 A0BDD0F5                              mov     h1,_hd
0240 089 A4BDD2F6                              neg     h2,_hf
0244 08A 84BDD2F7                              sub     h2,_hs
0248 08B 84BDD2F8                              sub     h2,_hb
024C 08C 84BDD0E9                              sub     h1,h2
0250 08D 29FDD001                              shr     h1,#1           wc
0254 08E C8BDD2E8                              addx    h2,h1
0258 08F A0BDACEF                              mov     t1,_ht
025C 090 A0BDAEF1                              mov     t2,_hx
0260 091 5CFD78B7                              call    #multiply
0264 092 A0BDB4F5                              mov     hf,_hd
0268 093 84BDB4D6                              sub     hf,t1
026C 094 29FDB401                              shr     hf,#1           wc
0270 095 A0BDB6F3                              mov     hb,_ho
0274 096 C8BDB6DA                              addx    hb,hf
0278 097 84BDB4F3                              sub     hf,_ho                  '+59
027C 098 A0BDACF0                              mov     t1,_vt                  'compute vertical metrics
0280 099 A0BDAEF2                              mov     t2,_vx
0284 09A 5CFD78B7                              call    #multiply
0288 09B 617DD808                              test    _mode,#%1000    wc      'consider tile size
028C 09C 70FDA001                              muxc    linerot,#1
0290 09D A0BDC8CF                              mov     lineadd,lineinc
0294 09E 28F1C801              if_c            shr     lineadd,#1
0298 09F 2CF1AC01              if_c            shl     t1,#1
029C 0A0 617DD804                              test    _mode,#%0100    wc      'consider interlace
02A0 0A1 28F1AC01              if_c            shr     t1,#1
02A4 0A2 A0BDB8F9                              mov     vf,_vd
02A8 0A3 84BDB8D6                              sub     vf,t1
02AC 0A4 29FDB801                              shr     vf,#1           wc
02B0 0A5 A4BDBAF4                              neg     vb,_vo
02B4 0A6 C8BDBADC                              addx    vb,vf
02B8 0A7 80BDB8F4                              add     vf,_vo                  '+53
02BC 0A8 58FFFC60                              movi    vcfg,#%01100_000        '+1, set video configuration
02C0 0A9 5CBDA8D5      :colors                 jmpret  taskptr,taskret         '+1=114/160, break and return later
02C4 0AA A0FDAC0D                              mov     t1,#13                  'load next 13 colors into colortable
02C8 0AB A0BDAEB2      :loop                   mov     t2,:color               '5 times = 65 (all 64 colors loaded)
02CC 0AC 28FDAE07                              shr     t2,#9-2
02D0 0AD 60FDAEFC                              and     t2,#$FC
02D4 0AE 80BDAEEE                              add     t2,_colors
02D8 0AF 08BDAED7                              rdlong  t2,t2
02DC 0B0 60BDAED3                              and     t2,colormask
02E0 0B1 68BDAEE7                              or      t2,hvbase
02E4 0B2 A0BF00D7      :color                  mov     colortable,t2
02E8 0B3 80BD64CA                              add     :color,d0
02EC 0B4 64BD64CB                              andn    :color,d6
02F0 0B5 E4FDACAB                              djnz    t1,#:loop               '+158
02F4 0B6 5C7C00A9                              jmp     #:colors                '+1, keep loading colors
02F8 0B7 2CFDAE0B      multiply                shl     t2,#8+4-1
02FC 0B8 A0FDC408                              mov     tile,#8
0300 0B9 29FDAC01      :loop                   shr     t1,#1           wc
0304 0BA 80B1ACD7              if_c            add     t1,t2
0308 0BB E4FDC4B9                              djnz    tile,#:loop
030C 0BC 5C7C0000      multiply_ret            ret                             '+37
0310 0BD A0FFF000      disabled                mov     ctra,#0                 'reset ctra
0314 0BE A0FFFC00                              mov     vcfg,#0                 'reset video
0318 0BF 083FE9F0                              wrlong  outa,par                'set status to disabled
031C 0C0 08FDAC00                              rdlong  t1,#0                   'get CLKFREQ
0320 0C1 28FDAC08                              shr     t1,#8                   'nap for ~4ms
0324 0C2 48FDAC03                              min     t1,#3
0328 0C3 80BDADF1                              add     t1,cnt
032C 0C4 F8FDAC00                              waitcnt t1,#0
0330 0C5 5C7C0000                              jmp     #entry                  'reload parameters
0334 0C6 0007A120      pllmin                  long    500_000                 'pll lowest output frequency
0338 0C7 07A12000      pllmax                  long    128_000_000             'pll highest output frequency
033C 0C8 007A1200      m8                      long    8_000_000               '*16 = 128MHz (pll vco max)
0340 0C9 003D0900      m4                      long    4_000_000               '*16 = 64MHz (pll vco min)
0344 0CA 00000200      d0                      long    1 << 9 << 0
0348 0CB 00008000      d6                      long    1 << 9 << 6
034C 0CC 00000001      invisible               long    1
0350 0CD 00000002      visible                 long    2
0354 0CE 00060000      line                    long    $00060000
0358 0CF 10000000      lineinc                 long    $10000000
035C 0D0 00000000      linerot                 long    0
0360 0D1 01010101      vmask                   long    $01010101
0364 0D2 02020202      hmask                   long    $02020202
0368 0D3 FCFCFCFC      colormask               long    $FCFCFCFC
036C 0D4               taskptr                 res     1                       'tasks
036C 0D5               taskret                 res     1
036C 0D6               t1                      res     1
036C 0D7               t2                      res     1
036C 0D8               x                       res     1                       'display
036C 0D9               y                       res     1
036C 0DA               hf                      res     1
036C 0DB               hb                      res     1
036C 0DC               vf                      res     1
036C 0DD               vb                      res     1
036C 0DE               hx                      res     1
036C 0DF               vx                      res     1
036C 0E0               hc2x                    res     1
036C 0E1               screen                  res     1
036C 0E2               tile                    res     1
036C 0E3               pixels                  res     1
036C 0E4               lineadd                 res     1
036C 0E5               interlace               res     1
036C 0E6               hv                      res     1
036C 0E7               hvbase                  res     1
036C 0E8               h1                      res     1
036C 0E9               h2                      res     1
036C 0EA               _enable                 res     1       '0/non-0        read-only
036C 0EB               _pins                   res     1       '%pppttt        read-only
036C 0EC               _mode                   res     1       '%tihv          read-only
036C 0ED               _screen                 res     1       '@word          read-only
036C 0EE               _colors                 res     1       '@long          read-only
036C 0EF               _ht                     res     1       '1+             read-only
036C 0F0               _vt                     res     1       '1+             read-only
036C 0F1               _hx                     res     1       '1+             read-only
036C 0F2               _vx                     res     1       '1+             read-only
036C 0F3               _ho                     res     1       '0+-            read-only
036C 0F4               _vo                     res     1       '0+-            read-only
036C 0F5               _hd                     res     1       '1+             read-only
036C 0F6               _hf                     res     1       '1+             read-only
036C 0F7               _hs                     res     1       '1+             read-only
036C 0F8               _hb                     res     1       '1+             read-only
036C 0F9               _vd                     res     1       '1+             read-only
036C 0FA               _vf                     res     1       '1+             read-only
036C 0FB               _vs                     res     1       '1+             read-only
036C 0FC               _vb                     res     1       '2+             read-only
036C 0FD               _rate                   res     1       '500_000+       read-only
036C 0FE                                       fit     colortable              'fit underneath colortable ($180-$1BF)
036C                   PUB start(vgaptr) : okay
036C                     stop
036C     01            ; Frame_Call_Noreturn
036D     05 02         ; Call, $02
036F                     okay := cog := cognew(@entry, vgaptr) + 1
036F     34            ; Push_Neg1
0370     C7 0C         ; Reference_ObjectMem_Long, $000C
0372     64            ; Push_LocalMem_Long_1
0373     28            ; Coginit_Returns
0374     36            ; Push_1
0375     EC            ; Add
0376     42 80         ; Effect_VariableMem_Long_0, write, push
0378     61            ; Pop_LocalMem_Long_0
0379     32            ; Return
037A                   PUB stop
037A                     if cog
037A     40            ; Push_VariableMem_Long_0
037B     0A 05         ; Jump_If_False, $0005
037D                       cogstop(cog~ - 1)
037D     42 98         ; Effect_VariableMem_Long_0, post-clear, push
037F     36            ; Push_1
0380     ED            ; Subtract
0381     21            ; Cogstop
0382     32            ; Return
0383     00            ; Frame_Call_Return
                       Variables for TOP (display.vga.spin)
0384     0000          long COG
0388                   Reserved 8 bytes.
0390                   Base of stack.
03A0                   Top of stack.
