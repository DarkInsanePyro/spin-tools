0000     00B71B00      Frequency 12000000 Hz
0004     00            RCFast
0005     EE            Check Sum
0006     0010          Base of Program
0008     02F4          Base of Variables
000A     0300          Base of Stack
000C     0074          Initial Program Counter
000E     030C          Initial Stack Pointer
                       File "string.spin"
0010     0240 0118     Link to Next Object
0014     0064 0000     Link to PUB Append(destination, source)
0018     0071 0000     Link to PUB Clear(s)
001C     0077 0000     Link to PUB Compare(str1, str2, casesensitive)
0020     00A3 0000     Link to PUB Copy(destination, source)
0024     00AD 0004     Link to PUB EndsWith(str, substr) | end
0028     00BE 0000     Link to PUB Fill(str, char)
002C     00CC 0008     Link to PUB Find(str, substr) | i, size
0030     00FD 0000     Link to PUB FindChar(str, char)
0034     010E 0000     Link to PUB IsEmpty(str)
0038     0114 0000     Link to PUB Left(destination, source, count)
003C     011D 0000     Link to PUB Lower(str)
0040     012F 0000     Link to PUB Match(s1, s2)
0044     0139 0000     Link to PUB Mid(destination, source, start, count)
0048     0147 0004     Link to PUB Replace(str, substr, newsubstr) | size
004C     015E 0000     Link to PUB ReplaceAll(str, substr, newsubstr)
0050     016B 0000     Link to PUB ReplaceChar(str, char, newchar)
0054     0179 0000     Link to PUB ReplaceAllChars(str, char, newchar)
0058     0186 0000     Link to PUB Right(destination, source, count)
005C     0192 0000     Link to PUB StartsWith(str, substr)
0060     019B 0000     Link to PUB Strip(str)
0064     01CA 0000     Link to PUB Tokenize(str)
0068     0209 0000     Link to PUB Upper(str)
006C     021B 0000     Link to PRI IgnoreSpace(str)
0070                   OBJ
0070     0240 0004         cc : "char.type"
0074                   PUB Append(destination, source)
0074                       bytemove((destination + strsize(destination)), source, (strsize(source) + 1))
0074     64            ; Push_LocalMem_Long_1
0075     64            ; Push_LocalMem_Long_1
0076     16            ; Strsize
0077     EC            ; Add
0078     68            ; Push_LocalMem_Long_2
0079     68            ; Push_LocalMem_Long_2
007A     16            ; Strsize
007B     36            ; Push_1
007C     EC            ; Add
007D     1C            ; Bytemove
007E                       return destination
007E     64            ; Push_LocalMem_Long_1
007F     33            ; Pop_Return
0080     32            ; Return
0081                   PUB Clear(s)
0081                       Fill(s, 0)
0081     01            ; Frame_Call_Noreturn
0082     64            ; Push_LocalMem_Long_1
0083     35            ; Push_0
0084     05 06         ; Call, $06
0086     32            ; Return
0087                   PUB Compare(str1, str2, casesensitive)
0087                       if casesensitive
0087     6C            ; Push_LocalMem_Long_3
0088     0A 11         ; Jump_If_False, $0011
008A                           repeat
008A                               result := (byte[str1] - byte[str2++])
008A     64            ; Push_LocalMem_Long_1
008B     80            ; Push_MainMem_Byte
008C     6A AE         ; Effect_LocalMem_Long_2, post-inc, long
008E     80            ; Push_MainMem_Byte
008F     ED            ; Subtract
0090     61            ; Pop_LocalMem_Long_0
0091     66 AE         ; Effect_LocalMem_Long_1, post-inc, long
0093     80            ; Push_MainMem_Byte
0094     60            ; Push_LocalMem_Long_0
0095     FF            ; Logical_Not
0096     F0            ; Logical_And
0097     0B 71         ; Jump_If_True, $FFF1
0099     04 17         ; Branch, $0017
009B                           repeat
009B                               result := (cc.Lower(byte[str1]) - cc.Lower(byte[str2++]))
009B     00            ; Frame_Call_Return
009C     64            ; Push_LocalMem_Long_1
009D     80            ; Push_MainMem_Byte
009E     06 18 08      ; Objcall, $18, $08
00A1     00            ; Frame_Call_Return
00A2     6A AE         ; Effect_LocalMem_Long_2, post-inc, long
00A4     80            ; Push_MainMem_Byte
00A5     06 18 08      ; Objcall, $18, $08
00A8     ED            ; Subtract
00A9     61            ; Pop_LocalMem_Long_0
00AA     66 AE         ; Effect_LocalMem_Long_1, post-inc, long
00AC     80            ; Push_MainMem_Byte
00AD     60            ; Push_LocalMem_Long_0
00AE     FF            ; Logical_Not
00AF     F0            ; Logical_And
00B0     0B 69         ; Jump_If_True, $FFE9
00B2     32            ; Return
00B3                   PUB Copy(destination, source)
00B3                       bytemove(destination, source, (strsize(source) + 1))
00B3     64            ; Push_LocalMem_Long_1
00B4     68            ; Push_LocalMem_Long_2
00B5     68            ; Push_LocalMem_Long_2
00B6     16            ; Strsize
00B7     36            ; Push_1
00B8     EC            ; Add
00B9     1C            ; Bytemove
00BA                       return destination
00BA     64            ; Push_LocalMem_Long_1
00BB     33            ; Pop_Return
00BC     32            ; Return
00BD                   PUB EndsWith(str, substr) | end
00BD                       end := str + strsize(str) - strsize(substr)
00BD     64            ; Push_LocalMem_Long_1
00BE     64            ; Push_LocalMem_Long_1
00BF     16            ; Strsize
00C0     EC            ; Add
00C1     68            ; Push_LocalMem_Long_2
00C2     16            ; Strsize
00C3     ED            ; Subtract
00C4     6D            ; Pop_LocalMem_Long_3
00C5                       return (end == Find(end, substr))
00C5     6C            ; Push_LocalMem_Long_3
00C6     00            ; Frame_Call_Return
00C7     6C            ; Push_LocalMem_Long_3
00C8     68            ; Push_LocalMem_Long_2
00C9     05 07         ; Call, $07
00CB     FC            ; Equal
00CC     33            ; Pop_Return
00CD     32            ; Return
00CE                   PUB Fill(str, char)
00CE                       bytefill(str, char, strsize(str))
00CE     64            ; Push_LocalMem_Long_1
00CF     68            ; Push_LocalMem_Long_2
00D0     64            ; Push_LocalMem_Long_1
00D1     16            ; Strsize
00D2     18            ; Bytefill
00D3                       byte[str + strsize(str)] := 0
00D3     35            ; Push_0
00D4     64            ; Push_LocalMem_Long_1
00D5     64            ; Push_LocalMem_Long_1
00D6     16            ; Strsize
00D7     EC            ; Add
00D8     81            ; Pop_MainMem_Byte
00D9                       return str
00D9     64            ; Push_LocalMem_Long_1
00DA     33            ; Pop_Return
00DB     32            ; Return
00DC                   PUB Find(str, substr) | i, size
00DC                       size := strsize(substr)
00DC     68            ; Push_LocalMem_Long_2
00DD     16            ; Strsize
00DE     71            ; Pop_LocalMem_Long_4
00DF                       if(size--)
00DF     72 BE         ; Effect_LocalMem_Long_4, post-dec, long
00E1     0A 29         ; Jump_If_False, $0029
00E3                           repeat strsize(str--)
00E3     66 BE         ; Effect_LocalMem_Long_1, post-dec, long
00E5     16            ; Strsize
00E6     08 24         ; Loop_Start, $0024
00E8                               if(byte[++str] == byte[substr])
00E8     66 A6         ; Effect_LocalMem_Long_1, pre-inc, long
00EA     80            ; Push_MainMem_Byte
00EB     68            ; Push_LocalMem_Long_2
00EC     80            ; Push_MainMem_Byte
00ED     FC            ; Equal
00EE     0A 1A         ; Jump_If_False, $001A
00F0                                   repeat i from 0 to size
00F0     35            ; Push_0
00F1     6D            ; Pop_LocalMem_Long_3
00F2                                       if(byte[str][i] <> byte[substr][i])
00F2     64            ; Push_LocalMem_Long_1
00F3     6C            ; Push_LocalMem_Long_3
00F4     90            ; Push_Indexed_MainMem_Byte
00F5     68            ; Push_LocalMem_Long_2
00F6     6C            ; Push_LocalMem_Long_3
00F7     90            ; Push_Indexed_MainMem_Byte
00F8     FB            ; Not_Equal
00F9     0A 04         ; Jump_If_False, $0004
00FB                                           result := true
00FB     34            ; Push_Neg1
00FC     61            ; Pop_LocalMem_Long_0
00FD                                           quit
00FD     04 05         ; Branch, $0005
00FF     35            ; Push_0
0100     70            ; Push_LocalMem_Long_4
0101     6E 02 6E      ; Effect_LocalMem_Long_3, repeat-var loop, $FFEE
0104                                   ifnot(result~)
0104     62 98         ; Effect_LocalMem_Long_0, post-clear, push
0106     0B 02         ; Jump_If_True, $0002
0108                                       return str
0108     64            ; Push_LocalMem_Long_1
0109     33            ; Pop_Return
010A     09 5C         ; Loop_Continue, $FFDC
010C     32            ; Return
010D                   PUB FindChar(str, char)
010D                       repeat strsize(str--)
010D     66 BE         ; Effect_LocalMem_Long_1, post-dec, long
010F     16            ; Strsize
0110     08 0B         ; Loop_Start, $000B
0112                           if(byte[++str] == char)
0112     66 A6         ; Effect_LocalMem_Long_1, pre-inc, long
0114     80            ; Push_MainMem_Byte
0115     68            ; Push_LocalMem_Long_2
0116     FC            ; Equal
0117     0A 02         ; Jump_If_False, $0002
0119                               return str
0119     64            ; Push_LocalMem_Long_1
011A     33            ; Pop_Return
011B     09 75         ; Loop_Continue, $FFF5
011D     32            ; Return
011E                   PUB IsEmpty(str)
011E                       return (strsize(str) == 0)
011E     64            ; Push_LocalMem_Long_1
011F     16            ; Strsize
0120     35            ; Push_0
0121     FC            ; Equal
0122     33            ; Pop_Return
0123     32            ; Return
0124                   PUB Left(destination, source, count)
0124                       return Mid(destination, source, 0, count)
0124     00            ; Frame_Call_Return
0125     64            ; Push_LocalMem_Long_1
0126     68            ; Push_LocalMem_Long_2
0127     35            ; Push_0
0128     6C            ; Push_LocalMem_Long_3
0129     05 0D         ; Call, $0D
012B     33            ; Pop_Return
012C     32            ; Return
012D                   PUB Lower(str)
012D                       result := str
012D     64            ; Push_LocalMem_Long_1
012E     61            ; Pop_LocalMem_Long_0
012F                       repeat strsize(str)
012F     64            ; Push_LocalMem_Long_1
0130     16            ; Strsize
0131     08 0B         ; Loop_Start, $000B
0133                           byte[str++] := cc.Lower (byte[str])
0133     00            ; Frame_Call_Return
0134     64            ; Push_LocalMem_Long_1
0135     80            ; Push_MainMem_Byte
0136     06 18 08      ; Objcall, $18, $08
0139     66 AE         ; Effect_LocalMem_Long_1, post-inc, long
013B     81            ; Pop_MainMem_Byte
013C     09 75         ; Loop_Continue, $FFF5
013E     32            ; Return
013F                   PUB Match(s1, s2)
013F                       return (Compare (s1, s2, true) == 0)
013F     00            ; Frame_Call_Return
0140     64            ; Push_LocalMem_Long_1
0141     68            ; Push_LocalMem_Long_2
0142     34            ; Push_Neg1
0143     05 03         ; Call, $03
0145     35            ; Push_0
0146     FC            ; Equal
0147     33            ; Pop_Return
0148     32            ; Return
0149                   PUB Mid(destination, source, start, count)
0149                       bytemove(destination, source + start, count)
0149     64            ; Push_LocalMem_Long_1
014A     68            ; Push_LocalMem_Long_2
014B     6C            ; Push_LocalMem_Long_3
014C     EC            ; Add
014D     70            ; Push_LocalMem_Long_4
014E     1C            ; Bytemove
014F                       byte[destination + count] := 0
014F     35            ; Push_0
0150     64            ; Push_LocalMem_Long_1
0151     70            ; Push_LocalMem_Long_4
0152     EC            ; Add
0153     81            ; Pop_MainMem_Byte
0154                       return destination
0154     64            ; Push_LocalMem_Long_1
0155     33            ; Pop_Return
0156     32            ; Return
0157                   PUB Replace(str, substr, newsubstr) | size
0157                       result := Find(str, substr)
0157     00            ; Frame_Call_Return
0158     64            ; Push_LocalMem_Long_1
0159     68            ; Push_LocalMem_Long_2
015A     05 07         ; Call, $07
015C     61            ; Pop_LocalMem_Long_0
015D                       if result
015D     60            ; Push_LocalMem_Long_0
015E     0A 0D         ; Jump_If_False, $000D
0160                           size := strsize(newsubstr) <# strsize(substr)
0160     6C            ; Push_LocalMem_Long_3
0161     16            ; Strsize
0162     68            ; Push_LocalMem_Long_2
0163     16            ; Strsize
0164     E5            ; Limit_Max
0165     71            ; Pop_LocalMem_Long_4
0166                           bytemove(result, newsubstr, size)
0166     60            ; Push_LocalMem_Long_0
0167     6C            ; Push_LocalMem_Long_3
0168     70            ; Push_LocalMem_Long_4
0169     1C            ; Bytemove
016A                           result += size
016A     70            ; Push_LocalMem_Long_4
016B     62 4C         ; Effect_LocalMem_Long_0, Add, swap
016D     32            ; Return
016E                   PUB ReplaceAll(str, substr, newsubstr)
016E                       repeat while(str)
016E     64            ; Push_LocalMem_Long_1
016F     0A 09         ; Jump_If_False, $0009
0171                           str := Replace(str, substr, newsubstr)
0171     00            ; Frame_Call_Return
0172     64            ; Push_LocalMem_Long_1
0173     68            ; Push_LocalMem_Long_2
0174     6C            ; Push_LocalMem_Long_3
0175     05 0E         ; Call, $0E
0177     65            ; Pop_LocalMem_Long_1
0178     04 74         ; Branch, $FFF4
017A     32            ; Return
017B                   PUB ReplaceChar(str, char, newchar)
017B                       result := FindChar(str, char)
017B     00            ; Frame_Call_Return
017C     64            ; Push_LocalMem_Long_1
017D     68            ; Push_LocalMem_Long_2
017E     05 08         ; Call, $08
0180     61            ; Pop_LocalMem_Long_0
0181                       if result
0181     60            ; Push_LocalMem_Long_0
0182     0A 04         ; Jump_If_False, $0004
0184                           byte[result++] := newchar
0184     6C            ; Push_LocalMem_Long_3
0185     62 AE         ; Effect_LocalMem_Long_0, post-inc, long
0187     81            ; Pop_MainMem_Byte
0188     32            ; Return
0189                   PUB ReplaceAllChars(str, char, newchar)
0189                       repeat while(str)
0189     64            ; Push_LocalMem_Long_1
018A     0A 09         ; Jump_If_False, $0009
018C                           str := ReplaceChar(str, char, newchar)
018C     00            ; Frame_Call_Return
018D     64            ; Push_LocalMem_Long_1
018E     68            ; Push_LocalMem_Long_2
018F     6C            ; Push_LocalMem_Long_3
0190     05 10         ; Call, $10
0192     65            ; Pop_LocalMem_Long_1
0193     04 74         ; Branch, $FFF4
0195     32            ; Return
0196                   PUB Right(destination, source, count)
0196                       return Mid(destination, source, strsize(source) - count, count)
0196     00            ; Frame_Call_Return
0197     64            ; Push_LocalMem_Long_1
0198     68            ; Push_LocalMem_Long_2
0199     68            ; Push_LocalMem_Long_2
019A     16            ; Strsize
019B     6C            ; Push_LocalMem_Long_3
019C     ED            ; Subtract
019D     6C            ; Push_LocalMem_Long_3
019E     05 0D         ; Call, $0D
01A0     33            ; Pop_Return
01A1     32            ; Return
01A2                   PUB StartsWith(str, substr)
01A2                       return (str == Find(str, substr))
01A2     64            ; Push_LocalMem_Long_1
01A3     00            ; Frame_Call_Return
01A4     64            ; Push_LocalMem_Long_1
01A5     68            ; Push_LocalMem_Long_2
01A6     05 07         ; Call, $07
01A8     FC            ; Equal
01A9     33            ; Pop_Return
01AA     32            ; Return
01AB                   PUB Strip(str)
01AB                       result := IgnoreSpace(str)
01AB     00            ; Frame_Call_Return
01AC     64            ; Push_LocalMem_Long_1
01AD     05 17         ; Call, $17
01AF     61            ; Pop_LocalMem_Long_0
01B0                       str := (result + ((strsize(result) - 1) #> 0))
01B0     60            ; Push_LocalMem_Long_0
01B1     60            ; Push_LocalMem_Long_0
01B2     16            ; Strsize
01B3     36            ; Push_1
01B4     ED            ; Subtract
01B5     35            ; Push_0
01B6     E4            ; Limit_Min
01B7     EC            ; Add
01B8     65            ; Pop_LocalMem_Long_1
01B9                       repeat
01B9                           case byte[str]
01B9     39 01C7       ; Push_Word_Lit, $01C7
01BC     64            ; Push_LocalMem_Long_1
01BD     80            ; Push_MainMem_Byte
01BE     37 02         ; Push_Packed_Lit, $00000008
01C0     38 0D         ; Push_Byte_Lit, $0D
01C2     0E 0E         ; Compare_Case_Range, $000E
01C4     37 04         ; Push_Packed_Lit, $00000020
01C6     0D 0A         ; Compare_Case, $000A
01C8     37 26         ; Push_Packed_Lit, $0000007F
01CA     0D 06         ; Compare_Case, $0006
01CC     37 02         ; Push_Packed_Lit, $00000008
01CE     14            ; Quit
01CF     04 08         ; Branch, $0008
01D1     0C            ; Jump_From_Stack
01D2                               8 .. 13, 32, 127: byte[str--] := 0
01D2     35            ; Push_0
01D3     66 BE         ; Effect_LocalMem_Long_1, post-dec, long
01D5     81            ; Pop_MainMem_Byte
01D6     0C            ; Jump_From_Stack
01D7                               other: quit
01D7     04 60         ; Branch, $FFE0
01D9     32            ; Return
01DA                   PUB Tokenize(str)
01DA                       if str
01DA     64            ; Push_LocalMem_Long_1
01DB     0A 03         ; Jump_If_False, $0003
01DD                           tokenstr := str
01DD     64            ; Push_LocalMem_Long_1
01DE     A9 00         ; Pop_VariableMem_Word, $0000
01E0                       tokenstr := IgnoreSpace(tokenstr)
01E0     00            ; Frame_Call_Return
01E1     A8 00         ; Push_VariableMem_Word, $0000
01E3     05 17         ; Call, $17
01E5     A9 00         ; Pop_VariableMem_Word, $0000
01E7                       if strsize(tokenstr)
01E7     A8 00         ; Push_VariableMem_Word, $0000
01E9     16            ; Strsize
01EA     0A 03         ; Jump_If_False, $0003
01EC                           result := tokenstr
01EC     A8 00         ; Push_VariableMem_Word, $0000
01EE     61            ; Pop_LocalMem_Long_0
01EF                       repeat while(byte[tokenstr])
01EF     A8 00         ; Push_VariableMem_Word, $0000
01F1     80            ; Push_MainMem_Byte
01F2     0A 24         ; Jump_If_False, $0024
01F4                           case byte[tokenstr++]
01F4     39 0206       ; Push_Word_Lit, $0206
01F7     AA 00 AC      ; Effect_VariableMem_Word, $0000, post-inc, word
01FA     80            ; Push_MainMem_Byte
01FB     37 02         ; Push_Packed_Lit, $00000008
01FD     38 0D         ; Push_Byte_Lit, $0D
01FF     0E 09         ; Compare_Case_Range, $0009
0201     37 04         ; Push_Packed_Lit, $00000020
0203     0D 05         ; Compare_Case, $0005
0205     37 26         ; Push_Packed_Lit, $0000007F
0207     0D 01         ; Compare_Case, $0001
0209     0C            ; Jump_From_Stack
020A                                   byte[tokenstr - 1] := 0
020A     35            ; Push_0
020B     A8 00         ; Push_VariableMem_Word, $0000
020D     36            ; Push_1
020E     ED            ; Subtract
020F     81            ; Pop_MainMem_Byte
0210                                   quit
0210     37 02         ; Push_Packed_Lit, $00000008
0212     14            ; Quit
0213     04 03         ; Branch, $0003
0215     0C            ; Jump_From_Stack
0216     04 57         ; Branch, $FFD7
0218     32            ; Return
0219                   PUB Upper(str)
0219                       result := str
0219     64            ; Push_LocalMem_Long_1
021A     61            ; Pop_LocalMem_Long_0
021B                       repeat strsize(str)
021B     64            ; Push_LocalMem_Long_1
021C     16            ; Strsize
021D     08 0B         ; Loop_Start, $000B
021F                           byte[str++] := cc.Upper (byte[str])
021F     00            ; Frame_Call_Return
0220     64            ; Push_LocalMem_Long_1
0221     80            ; Push_MainMem_Byte
0222     06 18 07      ; Objcall, $18, $07
0225     66 AE         ; Effect_LocalMem_Long_1, post-inc, long
0227     81            ; Pop_MainMem_Byte
0228     09 75         ; Loop_Continue, $FFF5
022A     32            ; Return
022B                   PRI IgnoreSpace(str)
022B                       result := str
022B     64            ; Push_LocalMem_Long_1
022C     61            ; Pop_LocalMem_Long_0
022D                       repeat strsize(str--)
022D     66 BE         ; Effect_LocalMem_Long_1, post-dec, long
022F     16            ; Strsize
0230     08 1A         ; Loop_Start, $001A
0232                           case byte[++str]
0232     39 023A       ; Push_Word_Lit, $023A
0235     66 A6         ; Effect_LocalMem_Long_1, pre-inc, long
0237     80            ; Push_MainMem_Byte
0238     37 02         ; Push_Packed_Lit, $00000008
023A     38 0D         ; Push_Byte_Lit, $0D
023C     0E 0B         ; Compare_Case_Range, $000B
023E     37 04         ; Push_Packed_Lit, $00000020
0240     0D 07         ; Compare_Case, $0007
0242     37 26         ; Push_Packed_Lit, $0000007F
0244     0D 03         ; Compare_Case, $0003
0246     64            ; Push_LocalMem_Long_1
0247     33            ; Pop_Return
0248     0C            ; Jump_From_Stack
0249     0C            ; Jump_From_Stack
024A                               other: return str
024A     09 66         ; Loop_Continue, $FFE6
024C     32            ; Return
024D     00            ; Frame_Call_Return
024E     00            ; Frame_Call_Return
024F     00            ; Frame_Call_Return
                       File "char.type.spin"
0250     00A4 0009     Link to Next Object
0254     0024 0000     Link to PUB IsAlphaNumeric(c)
0258     003A 0000     Link to PUB IsAlpha(c)
025C     004B 0000     Link to PUB IsDigit(c)
0260     0057 0000     Link to PUB IsLower(c)
0264     0063 0000     Link to PUB IsUpper(c)
0268     006F 0000     Link to PUB IsSpace(c)
026C     0082 0000     Link to PUB Upper(c)
0270     0092 0000     Link to PUB Lower(c)
0274                   PUB IsAlphaNumeric(c)
0274                       return lookdown(c: "0".."9", "a".."z", "A".."Z")
0274     36            ; Push_1
0275     38 38         ; Push_Byte_Lit, $38
0277     64            ; Push_LocalMem_Long_1
0278     38 30         ; Push_Byte_Lit, $30
027A     38 39         ; Push_Byte_Lit, $39
027C     13            ; Lookdownrange_Compare
027D     38 61         ; Push_Byte_Lit, $61
027F     38 7A         ; Push_Byte_Lit, $7A
0281     13            ; Lookdownrange_Compare
0282     38 41         ; Push_Byte_Lit, $41
0284     38 5A         ; Push_Byte_Lit, $5A
0286     13            ; Lookdownrange_Compare
0287     0F            ; Look_Abort
0288     33            ; Pop_Return
0289     32            ; Return
028A                   PUB IsAlpha(c)
028A                       return lookdown(c: "a".."z", "A".."Z")
028A     36            ; Push_1
028B     38 49         ; Push_Byte_Lit, $49
028D     64            ; Push_LocalMem_Long_1
028E     38 61         ; Push_Byte_Lit, $61
0290     38 7A         ; Push_Byte_Lit, $7A
0292     13            ; Lookdownrange_Compare
0293     38 41         ; Push_Byte_Lit, $41
0295     38 5A         ; Push_Byte_Lit, $5A
0297     13            ; Lookdownrange_Compare
0298     0F            ; Look_Abort
0299     33            ; Pop_Return
029A     32            ; Return
029B                   PUB IsDigit(c)
029B                       return lookdown(c: "0".."9")
029B     36            ; Push_1
029C     38 55         ; Push_Byte_Lit, $55
029E     64            ; Push_LocalMem_Long_1
029F     38 30         ; Push_Byte_Lit, $30
02A1     38 39         ; Push_Byte_Lit, $39
02A3     13            ; Lookdownrange_Compare
02A4     0F            ; Look_Abort
02A5     33            ; Pop_Return
02A6     32            ; Return
02A7                   PUB IsLower(c)
02A7                       return lookdown(c: "a".."z")
02A7     36            ; Push_1
02A8     38 61         ; Push_Byte_Lit, $61
02AA     64            ; Push_LocalMem_Long_1
02AB     38 61         ; Push_Byte_Lit, $61
02AD     38 7A         ; Push_Byte_Lit, $7A
02AF     13            ; Lookdownrange_Compare
02B0     0F            ; Look_Abort
02B1     33            ; Pop_Return
02B2     32            ; Return
02B3                   PUB IsUpper(c)
02B3                       return lookdown(c: "A".."Z")
02B3     36            ; Push_1
02B4     38 6D         ; Push_Byte_Lit, $6D
02B6     64            ; Push_LocalMem_Long_1
02B7     38 41         ; Push_Byte_Lit, $41
02B9     38 5A         ; Push_Byte_Lit, $5A
02BB     13            ; Lookdownrange_Compare
02BC     0F            ; Look_Abort
02BD     33            ; Pop_Return
02BE     32            ; Return
02BF                   PUB IsSpace(c)
02BF                       return lookdown(c: " ", 9, 10, 13)
02BF     36            ; Push_1
02C0     38 80         ; Push_Byte_Lit, $80
02C2     64            ; Push_LocalMem_Long_1
02C3     37 04         ; Push_Packed_Lit, $00000020
02C5     11            ; Lookdown_Compare
02C6     38 09         ; Push_Byte_Lit, $09
02C8     11            ; Lookdown_Compare
02C9     38 0A         ; Push_Byte_Lit, $0A
02CB     11            ; Lookdown_Compare
02CC     38 0D         ; Push_Byte_Lit, $0D
02CE     11            ; Lookdown_Compare
02CF     0F            ; Look_Abort
02D0     33            ; Pop_Return
02D1     32            ; Return
02D2                   PUB Upper(c)
02D2                       if IsLower(c)
02D2     00            ; Frame_Call_Return
02D3     64            ; Push_LocalMem_Long_1
02D4     05 04         ; Call, $04
02D6     0A 07         ; Jump_If_False, $0007
02D8                           return c - 32
02D8     64            ; Push_LocalMem_Long_1
02D9     37 04         ; Push_Packed_Lit, $00000020
02DB     ED            ; Subtract
02DC     33            ; Pop_Return
02DD     04 02         ; Branch, $0002
02DF                           return c
02DF     64            ; Push_LocalMem_Long_1
02E0     33            ; Pop_Return
02E1     32            ; Return
02E2                   PUB Lower(c)
02E2                       if IsUpper(c)
02E2     00            ; Frame_Call_Return
02E3     64            ; Push_LocalMem_Long_1
02E4     05 05         ; Call, $05
02E6     0A 07         ; Jump_If_False, $0007
02E8                           return c + 32
02E8     64            ; Push_LocalMem_Long_1
02E9     37 04         ; Push_Packed_Lit, $00000020
02EB     EC            ; Add
02EC     33            ; Pop_Return
02ED     04 02         ; Branch, $0002
02EF                           return c
02EF     64            ; Push_LocalMem_Long_1
02F0     33            ; Pop_Return
02F1     32            ; Return
02F2     00            ; Frame_Call_Return
02F3     00            ; Frame_Call_Return
                       Variables for TOP (string.spin)
02F4     0000          word TOKENSTR
02F8                   Reserved 8 bytes.
0300                   Base of stack.
0310                   Top of stack.
